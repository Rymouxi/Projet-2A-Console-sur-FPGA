import tkinter as tk
from tkinter import ttk

# Save function (to be implemented)
def save():
    pass

# Run function (to be implemented)
def run():
    pass

# Stop function (to be implemented)
def stop():
    pass

# Run step by step function (to be implemented)
def run_step_by_step():
    pass

# Reset function (to be implemented)
def reset():
    pass

# Connect to board function (to be implemented)
def connect_board():
    pass

# Download code function (to be implemented)
def download_code():
    pass

# Settings function (to be implemented)
def settings():
    pass

# Import code function (to be implemented)
def import_code():
    pass

# New file code function (to be implemented)
def new_file():
    pass

# Create the main window
window = tk.Tk()
window.title("Simulator")
window.geometry("800x600")  # Initial size of the window

# Main frame
main_frame = ttk.Frame(window)
main_frame.pack(expand=True, fill="both")

# Frame for the left toolbar
toolbar_frame = ttk.Frame(main_frame)
toolbar_frame.pack(side="left", fill="y")

toolbar = ttk.Frame(toolbar_frame)
toolbar.pack(fill="y")

button_save = ttk.Button(toolbar, text="Save", command=save)
button_run = ttk.Button(toolbar, text="Run", command=run)
button_stop = ttk.Button(toolbar, text="Stop", command=stop)
button_step = ttk.Button(toolbar, text="Run Step by Step", command=run_step_by_step)
button_reset = ttk.Button(toolbar, text="Reset", command=reset)
button_import = ttk.Button(toolbar, text="Import", command=import_code)
button_connect = ttk.Button(toolbar, text="Connect Board", command=connect_board)
button_download = ttk.Button(toolbar, text="Download Code", command=download_code)
button_settings = ttk.Button(toolbar, text="Settings", command=settings)
button_newfile = ttk.Button(toolbar, text="New File", command=new_file)

button_newfile.pack(fill="x",pady=5)
button_save.pack(fill="x", pady=5)
button_import.pack(fill="x", pady=5)
button_run.pack(fill="x", pady=5)
button_stop.pack(fill="x", pady=5)
button_step.pack(fill="x", pady=5)
button_reset.pack(fill="x", pady=5)
button_connect.pack(fill="x", pady=5)
button_download.pack(fill="x", pady=5)
button_settings.pack(fill="x", pady=5)


# Assembly code area in the middle
asm_zone = tk.Text(main_frame, width=40, height=20)
asm_zone.pack(side="left", fill="both", expand=True, padx=5, pady=5)

# Register frame on the right of the assembly zone
register_frame = ttk.LabelFrame(main_frame, text="Registers")
register_frame.pack(side="right", fill="y")

# Create register widgets (to be adapted to the number of registers)
registers = []
for i in range(15):
    register_name = f"R{i + 1}:"
    register_value = tk.StringVar()
    register_value.set("0x0000")  # Initial value
    label_register = ttk.Label(register_frame, text=register_name)
    register_field = ttk.Label(register_frame, textvariable=register_value)
    label_register.grid(row=i, column=0, sticky="w", padx=5, pady=2)
    register_field.grid(row=i, column=1, sticky="w", padx=5, pady=2)
    registers.append(register_value)

# Pipeline frame at the bottom
pipeline_frame = ttk.LabelFrame(window, text="Pipeline")
pipeline_frame.pack(side="bottom", fill="both", expand=True, padx=5, pady=5)

# Add pipeline stages to the frame (to be adapted)
pipeline_stages = []
for i, stage in enumerate(["Fetch", "Decode", "Execute"]):
    stage_label = ttk.Label(pipeline_frame, text=stage)
    stage_label.grid(row=0, column=i, padx=5, pady=2)
    pipeline_stages.append(stage_label)

window.mainloop()
